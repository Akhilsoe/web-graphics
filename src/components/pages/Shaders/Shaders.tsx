import Page from "../../Page";
import { FragmentShaderDemo, VertexShaderDemo } from "./ShaderDemos";

export default function Shaders() {
  return (
    <Page pageName="shaders">
      <h1>Shaders</h1>
      <p>A Shader is a user-defined program designed to run on some stage of a graphics processor. Shaders provide the code for certain programmable stages of the rendering pipeline. They can also be used in a slightly more limited form for general, on-GPU computation.</p>
      <h2>Vertex Shaders</h2>
      <p>The Vertex Shader is the programmable Shader stage in the rendering pipeline that handles the processing of individual vertices. Vertex shaders are fed Vertex Attribute data, as specified from a vertex array object by a drawing command. A vertex shader receives a single vertex from the vertex stream and generates a single vertex to the output vertex stream. There must be a 1:1 mapping from input vertices to output vertices.<br></br>
      Vertex shaders typically perform transformations to post-projection space, for consumption by the Vertex Post-Processing stage. They can also be used to do per-vertex lighting, or to perform setup work for later shader stages.</p>
      <VertexShaderDemo />
      <h2>Fragment Shaders</h2>
      <p>A Fragment Shader is the Shader stage that will process a Fragment generated by the Rasterization into a set of colors and a single depth value.

      The fragment shader is the OpenGL pipeline stage after a primitive is rasterized. For each sample of the pixels covered by a primitive, a "fragment" is generated. Each fragment has a Window Space position, a few other values, and it contains all of the interpolated per-vertex output values from the last Vertex Processing stage.<br></br>

      The output of a fragment shader is a depth value, a possible stencil value (unmodified by the fragment shader), and zero or more color values to be potentially written to the buffers in the current framebuffers.<br></br>

      Fragment shaders take a single fragment as input and produce a single fragment as output.</p>
      <FragmentShaderDemo />
    </Page>
  );
}
